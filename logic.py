# logic.py (Vers√£o 01/Mai)
import spacy
import random
import re
from datetime import datetime, date
from database import (
    get_current_players, get_next_match, get_player_info,
    get_coaches, get_random_trivia, get_quiz_questions,
    get_db_connection, get_preference, save_preference,
    get_last_match_result
)

# Carrega o modelo spaCy
try:
    nlp = spacy.load("pt_core_news_sm")
    print("Modelo spaCy 'pt_core_news_sm' carregado.")
except OSError:
    print("Execute: python -m spacy download pt_core_news_sm")
    nlp = None

# --- Fun√ß√µes de Gera√ß√£o de Resposta ---

def get_initial_message():
    """Retorna a mensagem de boas-vindas inicial do bot."""
    return "Sou o PanteraBot! üêæ O que voc√™ quer saber sobre a FURIA hoje? Digite <em>ajuda</em> para ver algumas op√ß√µes!"

def generate_greeting():
    """Gera uma sauda√ß√£o aleat√≥ria."""
    greetings = [
        "E a√≠, na√ß√£o! üêæ Manda a braba, o que voc√™ quer saber sobre a FURIA?",
        "Fala, torcedor(a)! Pronto(a) pra vibrar com a Pantera? Pergunta a√≠!",
        "Chega mais! Qual a boa sobre a FURIA que voc√™ quer hoje?",
        "Salve! PanteraBot na √°rea. Em que posso ajudar?",
        "Oi! Preparado(a) pra aula de CS e paix√£o pela FURIA? Manda a pergunta!",
    ]
    return random.choice(greetings)

def generate_help_response():
    """Gera a mensagem de ajuda com exemplo de jogador randomizado."""
    example_player = "KSCERATO"
    try:
         players = get_current_players()
         if players:
             player_nicknames = [p['nickname'] for p in players]
             if player_nicknames:
                 example_player = random.choice(player_nicknames)
    except Exception as e:
         print(f"Erro ao buscar jogadores para exemplo de ajuda: {e}")

    capabilities = [
        "- Pr√≥ximo jogo da FURIA",
        "- Jogadores atuais",
        "- Quem √© o IGL",
        "- Quem √© o Coach / Treinador",
        f"- Informa√ß√µes sobre um jogador (ex: quem √© {example_player}?)",
        "- Curiosidade ou frase marcante (<em>/trivia</em>)",
        "- Um quiz sobre a FURIA (<em>/quiz</em>)",
        "- Resultado do √∫ltimo jogo"
    ]
    return "Sou o PanteraBot! üêæ Voc√™ pode me perguntar sobre:\n\n" + "\n".join(capabilities)


def generate_player_list_response(session):
    """Gera lista de jogadores com intro variada, clarifica√ß√£o e exemplo randomizado."""
    players = get_current_players()
    if not players: return "Ih, parece que t√¥ desatualizado sobre a line atual. Preciso verificar!"
    intros = ["A line atual da FURIA conta com essa galera braba:", "O time principal t√° formado assim:", "Nossos representantes no servidor s√£o estes monstros:", "Segura a line-up atual da Pantera:", "Quem t√° defendendo nosso manto agora √©:",]
    intro_line = random.choice(intros)
    clarification = "\n\n(Line-up Principal e Reservas Atuais)"
    player_lines = [f"- <strong>{p['nickname']}</strong> ({p['role']})" for p in players]
    example_player = "KSCERATO"
    player_nicknames = [p['nickname'] for p in players]
    if player_nicknames: example_player = random.choice(player_nicknames)
    response_base = intro_line + clarification + "\n" + "\n".join(player_lines)
    suggestion = f"\n\nQuer saber mais detalhes sobre algum deles? (Ex: 'quem √© {example_player}?')"
    response = response_base + suggestion
    # Esta fun√ß√£o n√£o precisa modificar a session, apenas recebe se for chamada pelo 'sim'
    return response

# Recebe 'session' pois modifica o estado
def generate_next_match_response(session):
    """Gera informa√ß√µes sobre o pr√≥ximo jogo com data din√¢mica, varia√ß√µes e sugest√£o."""
    match = get_next_match()
    if not match:
        today = date.today(); formatted_today = today.strftime('%d/%m/%Y')
        no_match_responses = [f"Ainda n√£o tenho data... (depois de {formatted_today})...", f"Segura a ansiedade!... (depois de {formatted_today})...", f"Calend√°rio t√° em branco... (depois de {formatted_today})...",]
        return random.choice(no_match_responses)
    tournament_comment = ""; opponent = match['opponent']; formatted_dt = match['formatted_datetime']
    if 'tournament' in match.keys() and match['tournament']:
        tournament_lower = match['tournament'].lower()
        if 'major' in tournament_lower: tournament_comment = "√â MAJOR! üí•"
        else: tournament_comment = f"Valendo pelo <strong>{match['tournament']}</strong>!"
    else: tournament_comment = "Jogo importante!"
    intros = ["Prepare a torcida!...", "Anota a√≠!...", "√â dia de FURIA!...", "Fica ligado!...",]
    outros = ["VAMO FURIA! üñ§", "Pra cima deles! #DIADEFURIA", "Contando as horas! ‚è∞", "Que ven√ßa o melhor...",]
    response_base = f"{random.choice(intros)} contra a <strong>{opponent}</strong> {tournament_comment} no dia <strong>{formatted_dt}</strong>."
    suggestion = f"\n\nQuer conferir a line-up atual?"
    response = response_base + suggestion + " " + random.choice(outros)
    session['state'] = 'awaiting_yes_no'; session['yes_no_action'] = 'get_players'; session['yes_no_subject'] = None; session.modified = True
    return response

# Recebe 'session' pois modifica o estado
def generate_player_info_response(nickname, session):
    """Gera informa√ß√µes sobre um jogador, incluindo stats, com sintaxe corrigida."""
    player = get_player_info(nickname)
    if not player:
        not_found_responses = [
            f"Hmm, n√£o achei infos sobre <strong>{nickname}</strong>. O nick t√° certo mesmo? ü§î",
            f"Ser√° que <strong>{nickname}</strong> t√° na nossa line? N√£o encontrei dados dele aqui.",
            f"Busquei aqui, mas nada sobre <strong>{nickname}</strong>. Confere se o nome √© esse?",
            f"N√£o encontrei <strong>{nickname}</strong> na minha base de dados de jogadores atuais.",
            f"Sobre <strong>{nickname}</strong>... ainda n√£o tenho essa informa√ß√£o. Tente outro jogador!",
            f"Minha busca por <strong>{nickname}</strong> voltou vazia. Tem certeza que √© assim que escreve?",
        ]
        return random.choice(not_found_responses)

    # Formata data de entrada (MM/YYYY)
    formatted_join_date = player['join_date'] # Valor padr√£o
    try:
        if player['join_date']:
            join_date_obj = datetime.strptime(player['join_date'], '%Y-%m-%d')
            formatted_join_date = join_date_obj.strftime('%m/%Y')
    except Exception as e:
        # Mant√©m log de erro no console
        print(f"Erro formatar data {player['join_date'] if 'join_date' in player.keys() else 'N/A'} para {nickname}: {e}")

    # Varia√ß√µes para info b√°sica
    player_role = player['role'] if 'role' in player.keys() else 'N/A'
    role_intros = [f"joga como <strong>{player_role}</strong>", f"atua na fun√ß√£o de <strong>{player_role}</strong>", f"√© o nosso <strong>{player_role}</strong>",]
    join_intros = [f"e entrou pra FURIA em {formatted_join_date}", f"e veste nossa camisa desde {formatted_join_date}", f"e faz parte da Pantera desde {formatted_join_date}",]
    compliments = ["Monstro!", "Craque!", "Representa!", "Orgulho!", "Lenda!"]
    player_name = player['name'] if 'name' in player.keys() else 'N/A'

    # Monta a parte inicial da resposta
    response_part1 = (f"O <strong>{player['nickname']}</strong> ({player_name}) "
                      f"{random.choice(role_intros)} "
                      f"{random.choice(join_intros)}. "
                      f"{random.choice(compliments)} üî•")

    response_part2 = ""
    stats_found = []

    # Verifica e formata cada stat com try/except indentado corretamente
    if 'rating' in player.keys() and player['rating'] is not None:
        try:
            stats_found.append(f"Rating: {float(player['rating']):.2f}")
        except (ValueError, TypeError):
            pass

    if 'kd_ratio' in player.keys() and player['kd_ratio'] is not None:
        try:
            stats_found.append(f"K/D: {float(player['kd_ratio']):.2f}")
        except (ValueError, TypeError):
            pass

    if 'headshot_perc' in player.keys() and player['headshot_perc'] is not None:
        try:
            stats_found.append(f"HS: {float(player['headshot_perc']):.1f}%")
        except (ValueError, TypeError):
            pass

    if stats_found:
        stats_intros = ["Stats recentes:", "Desempenho (m√©dia):", "N√∫meros:", "Pra quem curte n√∫meros:", "Algumas stats:",]
        stats_string = " | ".join(stats_found)
        response_part2 = f"\n\nüìä {random.choice(stats_intros)}\n{stats_string}"

    # Sugest√£o final
    suggestion = "\n\nQuer ver a line completa?"
    response = response_part1 + response_part2 + suggestion

    session['state'] = 'awaiting_yes_no'
    session['yes_no_action'] = 'get_players' # A√ß√£o se disser 'sim'
    session['yes_no_subject'] = None
    session.modified = True # Linha essencial para salvar o estado

    return response

# N√£o precisa de session
def generate_coach_response():
    """Busca os coaches no DB e gera uma resposta formatada com varia√ß√µes."""
    try: coaches = get_coaches()
    except Exception as e: print(f"Erro DB coaches: {e}"); return "Tive um problema ao buscar infos do coach."
    if not coaches: return "Ops! Sem info atualizada sobre o comando t√©cnico agora."
    coach_names_formatted = []
    for c in coaches:
        name_part = f" ({c['name']})" if 'name' in c.keys() and c['name'] else ""
        coach_names_formatted.append(f"<strong>{c['nickname']}</strong>{name_part}")
    if len(coach_names_formatted) == 1: coach_list_str = coach_names_formatted[0]
    elif len(coach_names_formatted) == 2: coach_list_str = " e ".join(coach_names_formatted)
    else: coach_list_str = ", ".join(coach_names_formatted[:-1]) + " e " + coach_names_formatted[-1]
    responses = [f"A comiss√£o t√©cnica: {coach_list_str}.", f"No comando t√©cnico: {coach_list_str}!", f"Quem orienta: {coach_list_str}.", f"Respons√°veis pela estrat√©gia: {coach_list_str}.",]
    return random.choice(responses)

# N√£o precisa de session
def generate_last_match_response():
    """Busca o √∫ltimo resultado e gera uma resposta formatada com varia√ß√µes."""
    try: last_match = get_last_match_result()
    except Exception as e: print(f"Erro DB √∫ltimo resultado: {e}"); return "Tive um problema ao buscar o √∫ltimo resultado."
    if not last_match:
        no_results = ["Ainda n√£o tenho resultados anteriores.", "N√£o encontrei o √∫ltimo resultado...", "Busca pelo √∫ltimo jogo vazia...",]
        return random.choice(no_results)
    opponent = last_match['opponent']; tournament = last_match['tournament']; date_time = last_match['formatted_datetime']
    furia_score = last_match['furia_score']; opponent_score = last_match['opponent_score']
    score_str = ""; win_loss_comment = ""
    if furia_score is not None and opponent_score is not None:
        score_str = f"<strong>FURIA {furia_score} x {opponent_score} {opponent}</strong>"
        if furia_score > opponent_score: win_loss_comments = ["VIT√ìRIA!", "Ganhamos!", "GG WP!", "Amassamos!", "Deu bom!",]; win_loss_comment = f" ‚úÖ {random.choice(win_loss_comments)}"
        elif furia_score < opponent_score: win_loss_comments = ["Que pena...", "Essa doeu.", "Bola pra frente.", "Fica pra pr√≥xima.", "Perdemos.",]; win_loss_comment = f" ‚ùå {random.choice(win_loss_comments)}"
        else: win_loss_comments = ["Empatamos.", "Jogo duro.", "Tudo igual."]; win_loss_comment = f" ü§ù {random.choice(win_loss_comments)}"
    else: score_str = f"contra <strong>{opponent}</strong>"; win_loss_comment = ". (Placar n√£o registrado)"
    intros = ["No √∫ltimo confronto:", "O resultado mais recente foi:", "Olha s√≥ o √∫ltimo jogo:", "Relembrando a √∫ltima partida:", "O √∫ltimo placar foi:",]
    tournament_str = f"pelo torneio <strong>{tournament}</strong>" if tournament else ""
    response = f"{random.choice(intros)}\nüóìÔ∏è Em {date_time},\n{score_str} {tournament_str}.{win_loss_comment}"
    return response

# Recebe 'session' pois modifica o estado
def generate_igl_response(session):
    """Gera a resposta sobre o IGL com varia√ß√µes, l√≥gica corrigida e sugest√£o."""
    conn = get_db_connection(); igl_row = None; igl_nickname = None
    try:
        row_by_role = conn.execute("SELECT nickname FROM players WHERE lower(role) LIKE '%igl%'").fetchone()
        if row_by_role: igl_row = row_by_role
        else:
            row_by_fallback = conn.execute("SELECT nickname FROM players WHERE lower(nickname) = 'fallen'").fetchone()
            if row_by_fallback: igl_row = row_by_fallback
    except Exception as e: print(f"Erro DB IGL: {e}"); return "Tive um problema ao buscar info do IGL."
    finally: conn.close()
    if igl_row:
        igl_nickname = igl_row['nickname']
        intros = [f"Quem comanda a estrat√©gia √© <strong>{igl_nickname}</strong>!", f"A voz da experi√™ncia... <strong>{igl_nickname}</strong>.", f"No comando t√°tico... <strong>{igl_nickname}</strong>!", f"O nosso IGL... <strong>{igl_nickname}</strong>.",]
        outros = ["Nosso capit√£o!", "Comanda muito!", "A mente por tr√°s!", "Lideran√ßa pura!",]
        response_base = random.choice(intros) + " " + random.choice(outros)
        suggestion = f"\n\nQuer saber mais sobre o {igl_nickname}?"
        response = response_base + suggestion

        session['state'] = 'awaiting_yes_no'; 
        session['yes_no_action'] = 'get_player_info'; 
        session['yes_no_subject'] = igl_nickname; 
        session.modified = True
        
        return response
    else: 
        return "Opa, preciso confirmar quem t√° de IGL no momento! A fun√ß√£o pode variar."

# N√£o precisa de session
def generate_trivia_response():
    """Gera uma trivia/cita√ß√£o com varia√ß√µes na introdu√ß√£o e sugest√£o."""
    try: item = get_random_trivia()
    except Exception as e: print(f"Erro DB trivia: {e}"); return "Tive um problema ao buscar a trivia."
    if not item:
         no_trivia_responses = ["Deu branco aqui...", "Mem√≥ria falhou...", "N√£o achei p√©rola...",]
         return random.choice(no_trivia_responses)
    response_base = ""
    if item['type'] == 'quote':
        quote_intros = ["Olha essa:", "Mandaram essa aqui:", "Pra refletir:", "Direto do KODE:", ]
        response_base = f"{random.choice(quote_intros)} <em>\"{item['content']}\"</em> - Dita por: <strong>{item['source']}</strong>."
    else:
         fact_intros = ["Voc√™ sabia? ü§î", "Fato curioso:", "Olha que interessante:", "Direto da enciclop√©dia:",]
         response_base = f"{random.choice(fact_intros)} {item['content']} (<strong>{item['source']}</strong>)."
    suggestion = f"\n\nQuer ouvir outra? Use o comando <em>/trivia</em>!"
    response = response_base + suggestion
    return response

# N√£o precisa de session
def generate_fallback_response():
    """Gera uma resposta padr√£o aleat√≥ria."""
    fallbacks = ["Essa a√≠ me pegou!...", "Hmm, n√£o captei...", "Xiii, buguei aqui....", "Desculpe, n√£o processei...", "Ainda n√£o aprendi...", "Minha bola de cristal...", "Essa foi um headshot...", "N√£o tenho essa info...", "N√£o entendi patavinas...", "Meu processador deu tela azul...",]
    return random.choice(fallbacks)

# --- L√≥gica do Quiz ---
# (Fun√ß√µes format_question, start_quiz, handle_quiz como estavam - minimizadas e limpas)
def format_question(question_data, index, total):
    option_a=str(question_data.get('option_a','')); option_b=str(question_data.get('option_b','')); option_c=str(question_data.get('option_c','')); question_text=str(question_data.get('question',''))
    return (f"--- <strong>Quiz Pergunta {index+1}/{total}</strong> ---\n\n<strong>{question_text}</strong>\n\nA) {option_a}\nB) {option_b}\nC) {option_c}\n\nResponda com A, B ou C.")
def start_quiz(session):
    num_questions_in_quiz = 3; questions = get_quiz_questions(num_questions=num_questions_in_quiz)
    if not questions or len(questions) < num_questions_in_quiz: return "Poxa, n√£o consegui encontrar perguntas suficientes..."
    session['quiz_active']=True; session['quiz_questions']=[dict(q) for q in questions]; session['current_question_index']=0; session['quiz_score']=0; session.modified=True
    return format_question(session['quiz_questions'][0], 0, len(session['quiz_questions']))
def handle_quiz(session, user_answer):
    idx=session.get('current_question_index',0); questions=session.get('quiz_questions',[]); score=session.get('quiz_score',0)
    if not session.get('quiz_active') or not questions or idx >= len(questions): session['quiz_active']=False; session.modified=True; return "O quiz j√° acabou... Digite <em>/quiz</em>..."
    current_question=questions[idx]; correct_answer=current_question.get('correct_option','').upper(); explanation=current_question.get('explanation'); user_answer=user_answer.strip().upper(); feedback=""
    if user_answer == correct_answer: score+=1; session['quiz_score']=score; correct_feedback=["BOA! ‚úÖ", "√â isso a√≠! ‚úÖ", "Mandou bem! ‚úÖ", "Na mosca! ‚úÖ",]; feedback=f"{random.choice(correct_feedback)}\n";
    elif user_answer in ['A', 'B', 'C']: wrong_feedback=[f"Ops! Correto: <strong>{correct_answer}</strong>. ‚ùå", f"Quase! Correto: <strong>{correct_answer}</strong>. ‚ùå", f"N√£o foi... Correto: <strong>{correct_answer}</strong>. ‚ùå",]; feedback=f"{random.choice(wrong_feedback)}\n";
    else: return "Resposta inv√°lida. Use A, B ou C."
    if explanation and (user_answer==correct_answer or user_answer in ['A','B','C']): feedback += f"<em>{explanation}</em>\n\n"
    next_idx=idx+1; session['current_question_index']=next_idx
    if next_idx >= len(questions):
        session['quiz_active']=False; final_header=f"<strong>Quiz finalizado!</strong>\n{score}/{len(questions)} acertos.\n"; final_comments_perfect=["Mandou bem demais! üèÜ", "Gabaritou! üèÜ", "Perfeito! üèÜ",]; final_comments_good=["Foi bem! üëç", "Resultado s√≥lido! üëç", "Legal! üëç",]; final_comments_bad=["Quase l√°! üòâ", "Faltou pouco! üòâ", "N√£o desanime! üòâ",]; final_message=final_header
        if score == len(questions): final_message += random.choice(final_comments_perfect)
        elif score >= len(questions)/2: final_message += random.choice(final_comments_good)
        else: final_message += random.choice(final_comments_bad)
        session.pop('quiz_questions', None); session.pop('current_question_index', None); session.pop('quiz_score', None); session.modified=True; return feedback+final_message
    else: next_question=questions[next_idx]; session.modified=True; return feedback+format_question(next_question, next_idx, len(questions))


# --- Processamento Principal da Mensagem ---

def process_message(user_message, session):
    """
    Analisa a mensagem do usu√°rio, considerando estados e padr√µes,
    e retorna a resposta apropriada.
    """
    message_lower = user_message.lower().strip()
    session_id = session.get('session_id')

    if not session_id:
        print("!!! ERRO CR√çTICO: session_id n√£o encontrado!") # Mantido log cr√≠tico
        return "Desculpe, ocorreu um erro com sua sess√£o. Tente recarregar a p√°gina."

    # Etapa 1: Verifica estados espec√≠ficos ('awaiting_fav_player', 'awaiting_yes_no')
    current_state = session.get('state')
    if current_state == 'awaiting_fav_player':
        potential_player_name = user_message.strip(); players = get_current_players(); validated_player = None; player_nicknames_list = [p['nickname'] for p in players] if players else []
        if players:
            for p in players:
                if potential_player_name.lower() == p['nickname'].lower(): validated_player = p['nickname']; break
        if validated_player:
            save_preference(session_id, 'favorite_player', validated_player); session.pop('state', None); session.modified = True
            confirmations = [f"Show! Anotei... <strong>{validated_player}</strong>.", f"Entendido! <strong>{validated_player}</strong>...", f"Massa! Prefer√™ncia... <strong>{validated_player}</strong>!",]
            return random.choice(confirmations)
        else:
            valid_names_str = ", ".join([f"<em>{n}</em>" for n in player_nicknames_list]) if player_nicknames_list else "Nenhum"
            error_message = f"Hmm, n√£o reconheci '<strong>{potential_player_name}</strong>'... ({valid_names_str})..."
            session.pop('state', None); session.modified = True # Limpa estado mesmo com erro
            return error_message

    elif current_state == 'awaiting_yes_no':
        positive_responses = ['sim', 's', 'quero', 'pode', 'manda', 'claro', 'yes', 'y', 'uhum']
        action = session.get('yes_no_action'); subject = session.get('yes_no_subject')
        session.pop('state', None); session.pop('yes_no_action', None); session.pop('yes_no_subject', None); session.modified = True
        if message_lower in positive_responses:
            # Chamadas Corrigidas para passar 'session' onde necess√°rio
            if action == 'get_player_info' and subject: return generate_player_info_response(subject, session)
            elif action == 'get_players': return generate_player_list_response(session)
            else: print(f"[DEBUG] Invalid action/subject for yes/no state: {action}, {subject}") # Mantido log √∫til
        # Se n√£o for 'sim', deixa continuar para processamento normal abaixo...

    # --- Etapa 2: Processamento normal ---
    bot_response = None; ask_preference_question = False

    # 2a: Comandos/Padr√µes de Alta Prioridade
    if message_lower == 'ajuda' or message_lower == '/ajuda': bot_response = generate_help_response()
    elif message_lower in ["bom dia", "boa tarde", "boa noite"]: bot_response = generate_greeting()
    elif message_lower == '/quiz': bot_response = start_quiz(session)
    elif message_lower == '/trivia': bot_response = generate_trivia_response()
    elif "coach" in message_lower or "treinador" in message_lower: bot_response = generate_coach_response()
    elif "quem √© o igl" in message_lower or "capitao" in message_lower: bot_response = generate_igl_response(session) # Passa session
    elif "√∫ltimo jogo" in message_lower or "resultado" in message_lower: bot_response = generate_last_match_response()
    elif re.match(r"(?:quem √©|fale sobre|infos sobre)\s+(.+)", user_message, re.IGNORECASE):
        match_info = re.match(r"(?:quem √©|fale sobre|infos sobre)\s+(.+)", user_message, re.IGNORECASE)
        potential_nickname = match_info.group(1).strip()
        if potential_nickname.lower() not in ['o igl', 'o coach', 'o treinador']:
             bot_response = generate_player_info_response(potential_nickname, session) # Passa session
        elif potential_nickname.lower() == 'o igl': bot_response = generate_igl_response(session) # Passa session
        elif potential_nickname.lower() in ['o coach', 'o treinador']: bot_response = generate_coach_response()
        else: bot_response = generate_player_info_response(potential_nickname, session) # Passa session
    elif session.get('quiz_active'): bot_response = handle_quiz(session, user_answer=user_message)

    # 2b: NLP Gen√©rico (se nada acima funcionou)
    if bot_response is None:
        intent = None; entities = {'player_nickname': None}
        if nlp:
            doc = nlp(user_message)
            # Listas de Keywords (mantidas)
            greetings_kw = ["oi", "ola", "eae", "salve", "opa"]
            schedule_kw = ["jogo", "joga", "partida", "quando", "pr√≥ximo", "agenda", "calend√°rio"]
            players_kw = ["jogadores", "time", "lineup", "line", "quem", "squad", "elenco"]
            igl_kw = ["igl", "capitao", "capit√£o", "lider", "l√≠der", "estrategia", "tatico", "comando"]
            coach_kw = ["coach", "treinador", "t√©cnico", "tecnico"]
            last_match_kw = ["√∫ltimo", "ultimo", "resultado", "placar", "ganhou", "perdeu", "anterior"]
            trivia_kw = ["frase", "historia", "fatos", "sabia"]
            try:
                current_players_list = get_current_players()
                known_players_db = [p['nickname'].lower() for p in current_players_list] if current_players_list else []
            except Exception as e: print(f"Erro NLP DB: {e}"); known_players_db = [] # Mantido log de erro

            # Detec√ß√£o de Inten√ß√£o NLP
            for token in doc:
                lemma = token.lemma_.lower(); text_lower = token.text.lower()
                if not intent:
                    if text_lower in greetings_kw or lemma in greetings_kw: intent = 'greeting'
                    elif text_lower in schedule_kw or lemma in schedule_kw: intent = 'get_schedule'
                    elif text_lower in players_kw or lemma in players_kw: intent = 'get_players'
                    elif text_lower in igl_kw or lemma in igl_kw: intent = 'get_igl'
                    elif text_lower in coach_kw or lemma in coach_kw: intent = 'get_coach'
                    elif text_lower in last_match_kw or lemma in last_match_kw: intent = 'get_last_result'
                    elif lemma in trivia_kw: intent = 'get_trivia'
                # Detec√ß√£o de Entidade NLP
                if text_lower in known_players_db or lemma in known_players_db:
                    entities['player_nickname'] = token.text
                    if intent is None or intent == 'get_players': intent = 'get_player_info'
            if not intent and entities['player_nickname']: intent = 'get_player_info'
            # print(f"Debug NLP -> Inten√ß√£o: {intent}, Entidades: {entities}") # Removido

            # Mapeamento Inten√ß√£o NLP -> Resposta
            if intent == 'greeting': bot_response = generate_greeting()
            elif intent == 'get_schedule': bot_response = generate_next_match_response(session) # Passa session
            elif intent == 'get_players':
                bot_response = generate_player_list_response(session) # Passa session
                if bot_response and 'desatualizado' not in bot_response:
                    fav_player = get_preference(session_id, 'favorite_player')
                    if fav_player is None and not session.get('asked_fav_player'): ask_preference_question = True
            elif intent == 'get_igl': bot_response = generate_igl_response(session) # Passa session
            elif intent == 'get_coach': bot_response = generate_coach_response()
            elif intent == 'get_last_result': bot_response = generate_last_match_response()
            elif intent == 'get_trivia': bot_response = generate_trivia_response()
            elif intent == 'get_player_info' and entities['player_nickname']:
                 bot_response = generate_player_info_response(entities['player_nickname'], session) # Passa session

        # Fallback final
        if bot_response is None:
            # print("[DEBUG] Nenhuma inten√ß√£o reconhecida. Usando fallback geral.") # Removido
            bot_response = generate_fallback_response()

    # --- Etapa 3: Adiciona pergunta sobre prefer√™ncia ---
    if ask_preference_question:
        fav_player_check = get_preference(session_id, 'favorite_player')
        if fav_player_check is None:
            question_text = "\n\nA prop√≥sito, quem √© seu jogador favorito da line atual?"
            bot_response = str(bot_response) + question_text
            session['state'] = 'awaiting_fav_player'; session['asked_fav_player'] = True; session.modified = True
            # print(f"[DEBUG] Perguntando jogador favorito. Set state for {session_id}") # Removido
        # else: print(f"[DEBUG] Ia perguntar fav_player, mas j√° definido: {fav_player_check}.") # Removido

    # --- Etapa 4: Retorna a resposta final ---
    return bot_response if bot_response is not None else generate_fallback_response()


# (if __name__ == '__main__': ...) # Bloco de teste local mantido comentado